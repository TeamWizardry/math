package com.flowpowered.math.test.vector;

import static com.flowpowered.math.test.TestUtil#E#.SQRT5;

import org.junit.Assert;
import org.junit.Test;

import com.flowpowered.math.TrigMath;
import com.flowpowered.math.test.TestUtil#E#;
import com.flowpowered.math.vector.Vec2#E#;
import com.flowpowered.math.vector.Vec3#E#;
import com.flowpowered.math.vector.Vec4#E#;
import com.flowpowered.math.vector.VecN#E#;

public class Vec4#E#Test {
    @Test
    public void testEmptyConstructor() {
        Vec4#E# vector = new Vec4#E#();
        TestUtil#E#.assertEquals(vector, 0, 0, 0, 0);
    }

    @Test
    public void testCopyVec2DefaultZWConstructor() {
        Vec4#E# vector = new Vec4#E#(new Vec2#E#(0, 1));
        TestUtil#E#.assertEquals(vector, 0, 1, 0, 0);
    }

    @Test
    public void testCopyVec2DoubleZWConstructor() {
        Vec4#E# vector = new Vec4#E#(new Vec2#E#(0, 1), 1d, 2d);
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 2);
    }

    @Test
    public void testCopyVec2FloatZWConstructor() {
        Vec4#E# vector = new Vec4#E#(new Vec2#E#(0, 1), 1, 2);
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 2);
    }

    @Test
    public void testCopyVec3DefaultWConstructor() {
        Vec4#E# vector = new Vec4#E#(new Vec3#E#(0, 1, 1));
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 0);
    }

    @Test
    public void testCopyVec3DoubleWConstructor() {
        Vec4#E# vector = new Vec4#E#(new Vec3#E#(0, 1, 1), 2d);
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 2);
    }

    @Test
    public void testCopyVec3FloatWConstructor() {
        Vec4#E# vector = new Vec4#E#(new Vec3#E#(0, 1, 1), 2);
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 2);
    }

    @Test
    public void testCopyVec4Constructor() {
        Vec4#E# vector = new Vec4#E#(new Vec4#E#(0, 1, 1, 2));
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 2);
    }

    @Test
    public void testCopyVecNConstructor() {
        Vec4#E# vector = new Vec4#E#(new VecN#E#(0, 1, 1, 2, 5));
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 2);
    }

    @Test
    public void testDoubleComponentsConstructor() {
        Vec4#E# vector = new Vec4#E#(0.5, 1.7, 3.8, 5.5);
        TestUtil#E#.assertEquals(vector, (#e#) 0.5, (#e#) 1.7, (#e#) 3.8, (#e#) 5.5);
    }

    @Test
    public void testFloatComponentsConstructor() {
        Vec4#E# vector = new Vec4#E#(0.5f, 1.7f, 3.8f, 5.5f);
        TestUtil#E#.assertEquals(vector, 0.5f, 1.7f, 3.8f, 5.5f);
    }

    @Test
    public void testPooledWholeNumberConstructor() {
        Vec4#E# vector = Vec4#E#.createPooled(0, 0, 0, 0);
        TestUtil#E#.assertEquals(vector, 0, 0, 0, 0);
        Assert.assertSame(vector, Vec4#E#.createPooled(0, 0, 0, 0));

        vector = Vec4#E#.createPooled(2, 0, 0, 3);
        TestUtil#E#.assertEquals(vector, 2, 0, 0, 3);
        Assert.assertSame(vector, Vec4#E#.createPooled(2, 0, 0, 3));
    }

    @Test
    public void testPooledFractionalConstructor() {
        Vec4#E# vector = Vec4#E#.createPooled(0, 0, 0, (#e#) 0.5);
        TestUtil#E#.assertEquals(vector, 0, 0, 0, (#e#) 0.5);
        Assert.assertNotSame(vector, Vec4#E#.createPooled(0, 0, 0, (#e#) 0.5));
    }

    @Test
    public void testPooledOutsideBoundsConstructor() {
        Vec4#E# vector = Vec4#E#.createPooled(1000, 1000, 1000, 1000);
        TestUtil#E#.assertEquals(vector, 1000, 1000, 1000, 1000);
        Assert.assertNotSame(vector, Vec4#E#.createPooled(1000, 1000, 1000, 1000));

        vector = Vec4#E#.createPooled(#EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE);
        TestUtil#E#.assertEquals(vector, #EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE);
        Assert.assertNotSame(vector, Vec4#E#.createPooled(#EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE));
    }

    @Test
    public void testGetters() {
        Vec4#E# vector = new Vec4#E#(0.5, 1.7, 3.8, 5.5);
        TestUtil#E#.assertEquals(vector.getX(), (#e#) 0.5);
        TestUtil#E#.assertEquals(vector.getY(), (#e#) 1.7);
        TestUtil#E#.assertEquals(vector.getZ(), (#e#) 3.8);
        TestUtil#E#.assertEquals(vector.getW(), (#e#) 5.5);
    }

    @Test
    public void testFloorGetters() {
        Vec4#E# vector = new Vec4#E#(0.5, 1.7, 3.8, 5.5);
        TestUtil#E#.assertEquals(vector.getFloorX(), 0);
        TestUtil#E#.assertEquals(vector.getFloorY(), 1);
        TestUtil#E#.assertEquals(vector.getFloorZ(), 3);
        TestUtil#E#.assertEquals(vector.getFloorW(), 5);
    }

    @Test
    public void testVec4Addition() {
        Vec4#E# vector = new Vec4#E#(0, 1, 1, 1).add(new Vec4#E#(5.5, -0.5, 3.8, 5.5));
        TestUtil#E#.assertEquals(vector, (#e#) 5.5, (#e#) 0.5, (#e#) 4.8, (#e#) 6.5);
    }

    @Test
    public void testDoubleComponentsAddition() {
        Vec4#E# vector = new Vec4#E#(0, 1, 1, 1).add(5.5, -0.5, 3.8, 5.5);
        TestUtil#E#.assertEquals(vector, (#e#) 5.5, (#e#) 0.5, (#e#) 4.8, (#e#) 6.5);
    }

    @Test
    public void testFloatComponentsAddition() {
        Vec4#E# vector = new Vec4#E#(0, 1, 1, 1).add(5.5f, -0.5f, 3.8f, 5.5f);
        TestUtil#E#.assertEquals(vector, 5.5f, 0.5f, (#e#) 4.8, 6.5f);
    }

    @Test
    public void testVec4Subtraction() {
        Vec4#E# vector = new Vec4#E#(10, 5, 1, 1).sub(new Vec4#E#(9, 4.5, 2, 1));
        TestUtil#E#.assertEquals(vector, 1, (#e#) 0.5, -1, 0);
    }

    @Test
    public void testDoubleComponentsSubtraction() {
        Vec4#E# vector = new Vec4#E#(10, 5, 1, 1).sub(9, 4.5, 2, 1);
        TestUtil#E#.assertEquals(vector, 1, (#e#) 0.5, -1, 0);
    }

    @Test
    public void testFloatComponentsSubtraction() {
        Vec4#E# vector = new Vec4#E#(10, 5, 1, 1).sub(9, 4.5f, 2f, 1f);
        TestUtil#E#.assertEquals(vector, 1, 0.5f, -1, 0);
    }

    @Test
    public void testDoubleFactorMultiplication() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).mul(1.5);
        TestUtil#E#.assertEquals(vector, 3, (#e#) 4.5, 6, (#e#) 7.5);
    }

    @Test
    public void testFloatFactorMultiplication() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).mul(1.5f);
        TestUtil#E#.assertEquals(vector, 3, 4.5f, 6, 7.5f);
    }

    @Test
    public void testVec4Multiplication() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).mul(new Vec4#E#(1.5, 2.5, 3.5, 4.5));
        TestUtil#E#.assertEquals(vector, 3, (#e#) 7.5, 14, (#e#) 22.5);
    }

    @Test
    public void testDoubleComponentsMultiplication() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).mul(1.5, 2.5, 3.5, 4.5);
        TestUtil#E#.assertEquals(vector, 3, (#e#) 7.5, 14, (#e#) 22.5);
    }

    @Test
    public void testFloatComponentsMultiplication() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).mul(1.5f, 2.5f, 3.5f, 4.5f);
        TestUtil#E#.assertEquals(vector, 3, 7.5f, 14, 22.5f);
    }

    @Test
    public void testDoubleFactorDivision() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).div(2d);
        TestUtil#E#.assertEquals(vector, 1, (#e#) 1.5, 2, (#e#) 2.5);
    }

    @Test
    public void testFloatFactorDivision() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).div(2);
        TestUtil#E#.assertEquals(vector, 1, 1.5f, 2, 2.5f);
    }

    @Test
    public void testVec4Division() {
        Vec4#E# vector = new Vec4#E#(2, 6, 12, 16).div(new Vec4#E#(2, 4, 8, 8));
        TestUtil#E#.assertEquals(vector, 1, (#e#) 1.5, (#e#) 1.5, 2f);
    }

    @Test
    public void testDoubleComponentsDivision() {
        Vec4#E# vector = new Vec4#E#(2, 6, 16, 18).div(2d, 4d, 8d, 9d);
        TestUtil#E#.assertEquals(vector, 1, (#e#) 1.5, 2, 2);
    }

    @Test
    public void testFloatComponentsDivision() {
        Vec4#E# vector = new Vec4#E#(2, 6, 16, 18).div(2, 4, 8, 9);
        TestUtil#E#.assertEquals(vector, 1, 1.5f, 2, 2);
    }

    @Test
    public void testVec4DotProduct() {
        #e# f = new Vec4#E#(2, 3, 4, 5).dot(new Vec4#E#(6, 7, 8, 9));
        TestUtil#E#.assertEquals(f, 110);
    }

    @Test
    public void testDoubleComponentsDotProduct() {
        #e# f = new Vec4#E#(2, 3, 4, 5).dot(6d, 7d, 8d, 9d);
        TestUtil#E#.assertEquals(f, 110);
    }

    @Test
    public void testFloatComponentsDotProduct() {
        #e# f = new Vec4#E#(2, 3, 4, 5).dot(6, 7, 8, 9);
        TestUtil#E#.assertEquals(f, 110);
    }

    @Test
    public void testVec4Project() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).project(new Vec4#E#(1, 1, 1, 1));
        TestUtil#E#.assertEquals(vector, (#e#) 3.5, (#e#) 3.5, (#e#) 3.5, (#e#) 3.5);
    }

    @Test
    public void testDoubleComponentsProject() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).project(1d, 1d, 1d, 1d);
        TestUtil#E#.assertEquals(vector, (#e#) 3.5, (#e#) 3.5, (#e#) 3.5, (#e#) 3.5);
    }

    @Test
    public void testFloatComponentsProject() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).project(1, 1, 1, 1);
        TestUtil#E#.assertEquals(vector, (#e#) 3.5, (#e#) 3.5, (#e#) 3.5, (#e#) 3.5);
    }

    @Test
    public void testRaiseToFloatPower() {
        Vec4#E# vector = new Vec4#E#(2, 6, 8, 5.5).pow(2);
        TestUtil#E#.assertEquals(vector, 4, 36, 64, 30.25f);
    }

    @Test
    public void testRaiseToDoublePower() {
        Vec4#E# vector = new Vec4#E#(2, 6, 8, 5.5).pow(2d);
        TestUtil#E#.assertEquals(vector, 4, 36, 64, (#e#) 30.25);
    }

    @Test
    public void testCeiling() {
        Vec4#E# vector = new Vec4#E#(2.5, 6.7, 7.9, 8.1).ceil();
        TestUtil#E#.assertEquals(vector, 3, 7, 8, 9);
    }

    @Test
    public void testFloor() {
        Vec4#E# vector = new Vec4#E#(2.5, 6.7, 7.8, 9.1).floor();
        TestUtil#E#.assertEquals(vector, 2, 6, 7, 9);
    }

    @Test
    public void testRound() {
        Vec4#E# vector = new Vec4#E#(2.2, 6.7, 7.8, 9.1).round();
        TestUtil#E#.assertEquals(vector, 2, 7, 8, 9);
    }

    @Test
    public void testAbsolute() {
        Vec4#E# vector1 = new Vec4#E#(-2.5, -6.7, -55, 0).abs();
        TestUtil#E#.assertEquals(vector1, (#e#) 2.5, (#e#) 6.7, 55, 0);
        Vec4#E# Vec2 = new Vec4#E#(2.5, 6.7, 55, 0).abs();
        TestUtil#E#.assertEquals(Vec2, (#e#) 2.5, (#e#) 6.7, 55, 0);
    }

    @Test
    public void testNegate() {
        Vec4#E# vector = new Vec4#E#(2.2, -6.7, 15.8, 20).negate();
        TestUtil#E#.assertEquals(vector, (#e#) -2.2, (#e#) 6.7, (#e#) -15.8, -20);
    }

    @Test
    public void testVec4Minimum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).min(new Vec4#E#(3, 4, 10, -1));
        TestUtil#E#.assertEquals(vector, 2, 4, -1, -1);
    }

    @Test
    public void testDoubleComponentsMinimum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).min(3, 4, 10, -1.1);
        TestUtil#E#.assertEquals(vector, 2, 4, -1, (#e#) -1.1);
    }

    @Test
    public void testFloatComponentsMinimum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).min(3, 4, 10, -1.1f);
        TestUtil#E#.assertEquals(vector, 2, 4, -1, -1.1f);
    }

    @Test
    public void testVec4Maximum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).max(new Vec4#E#(3, 4, 10, -1));
        TestUtil#E#.assertEquals(vector, 3, 6, 10, 0);
    }

    @Test
    public void testDoubleComponentsMaximum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).max(3, 4, 10, -1.1);
        TestUtil#E#.assertEquals(vector, 3, 6, 10, 0);
    }

    @Test
    public void testFloatComponentsMaximum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).max(3, 4, 10, -1.1f);
        TestUtil#E#.assertEquals(vector, 3, 6, 10, 0);
    }

    @Test
    public void testVec4DistanceSquared() {
        #e# f = new Vec3#E#(2, 3, 4).distanceSquared(new Vec3#E#(5, 6, 7));
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void testDoubleComponentsDistanceSquared() {
        #e# f = new Vec4#E#(2, 3, 4, 1).distanceSquared(5d, 6d, 7d, 1d);
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void testFloatComponentsDistanceSquared() {
        #e# f = new Vec4#E#(2, 3, 4, 5).distanceSquared(5, 6, 7, 5);
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void testVec4Distance() {
        #e# f = new Vec4#E#(0, 2, 4, 8).distance(new Vec4#E#(0, 8, 16, 8));
        TestUtil#E#.assertEquals(f, 6 * SQRT5);
    }

    @Test
    public void testDoubleComponentsDistance() {
        #e# f = new Vec4#E#(0, 2, 4, 8).distance(new Vec4#E#(0d, 8d, 16d, 8d));
        TestUtil#E#.assertEquals(f, 6 * SQRT5);
    }

    @Test
    public void testFloatComponentsDistance() {
        #e# f = new Vec4#E#(0, 2, 4, 8).distance(new Vec4#E#(0, 8, 16, 8));
        TestUtil#E#.assertEquals(f, 6 * SQRT5);
    }

    @Test
    public void testLength() {
        #e# f = new Vec4#E#(3, 4, 5, 6).length();
        TestUtil#E#.assertEquals(f, (#e#) Math.sqrt(86));
    }

    @Test
    public void testLengthSquared() {
        #e# f = new Vec4#E#(3, 4, 5, 6).lengthSquared();
        TestUtil#E#.assertEquals(f, 86);
    }

    @Test
    public void testNormalize() {
        Vec4#E# v1 = new Vec4#E#(1, 1, 0, 0).normalize();
        TestUtil#E#.assertEquals(v1, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO, 0, 0);
        Vec4#E# v2 = new Vec4#E#(0, 1, 0, 1).normalize();
        TestUtil#E#.assertEquals(v2, 0, (#e#) TrigMath.HALF_SQRT_OF_TWO, 0, (#e#) TrigMath.HALF_SQRT_OF_TWO);
        try {
            Vec4#E#.ZERO.normalize();
            Assert.fail();
        } catch (ArithmeticException ex) {
        }
    }

    @Test
    public void testGetMinAxis() {
        Vec4#E# vector1 = new Vec4#E#(1, 2, 3, 4);
        TestUtil#E#.assertEquals(vector1.getMinAxis(), 0);
        Vec4#E# Vec2 = new Vec4#E#(2, 1, 3, 4);
        TestUtil#E#.assertEquals(Vec2.getMinAxis(), 1);
        Vec4#E# Vec3 = new Vec4#E#(3, 2, 1, 4);
        TestUtil#E#.assertEquals(Vec3.getMinAxis(), 2);
        Vec4#E# Vec4 = new Vec4#E#(4, 2, 3, 1);
        TestUtil#E#.assertEquals(Vec4.getMinAxis(), 3);
    }

    @Test
    public void testGetMaxAxis() {
        Vec4#E# vector1 = new Vec4#E#(4, 2, 3, 1);
        TestUtil#E#.assertEquals(vector1.getMaxAxis(), 0);
        Vec4#E# Vec2 = new Vec4#E#(1, 4, 3, 2);
        TestUtil#E#.assertEquals(Vec2.getMaxAxis(), 1);
        Vec4#E# Vec3 = new Vec4#E#(1, 2, 4, 3);
        TestUtil#E#.assertEquals(Vec3.getMaxAxis(), 2);
        Vec4#E# Vec4 = new Vec4#E#(1, 2, 3, 4);
        TestUtil#E#.assertEquals(Vec4.getMaxAxis(), 3);
    }

    @Test
    public void testConvertToVec2() {
        Vec2#E# vector = new Vec4#E#(1, 2, 3, 4).toVec2();
        TestUtil#E#.assertEquals(vector, 1, 2);
    }

    @Test
    public void testConvertToVec3() {
        Vec3#E# vector = new Vec4#E#(1, 2, 3, 4).toVec3();
        TestUtil#E#.assertEquals(vector, 1, 2, 3);
    }

    @Test
    public void testConvertToVecN() {
        VecN#E# vector = new Vec4#E#(1, 2, 3, 4).toVecN();
        TestUtil#E#.assertEquals(vector, 1, 2, 3, 4);
    }

    @Test
    public void testConvertToArray() {
        #e#[] array = new Vec4#E#(1, 2, 3, 4).toArray();
        TestUtil#E#.assertEquals(array, 1, 2, 3, 4);
    }

    @Test
    public void testComparison() {
        int c1 = new Vec4#E#(10, 20, 30, 40).compareTo(new Vec4#E#(20, 20, 30, 40));
        Assert.assertTrue(c1 < 0);
        int c2 = new Vec4#E#(10, 20, 30, 40).compareTo(new Vec4#E#(10, 20, 30, 40));
        Assert.assertTrue(c2 == 0);
        int c3 = new Vec4#E#(10, 20, 30, 40).compareTo(new Vec4#E#(10, 10, 30, 40));
        Assert.assertTrue(c3 > 0);
        int c4 = new Vec4#E#(0.2, 0.2, 0.2, 0.2).compareTo(new Vec4#E#(0.1, 0.1, 0.1, 0.1));
        Assert.assertTrue(c4 > 0);
    }

    @Test
    public void testEquals() {
        Assert.assertTrue(new Vec4#E#(122, 43, 96, 50).equals(new Vec4#E#(122, 43, 96, 50)));
        Assert.assertFalse(new Vec4#E#(122, 43, 96, 50).equals(new Vec4#E#(378, 95, 96, 0)));
    }

    @Test
    public void testCloning() {
        Vec4#E# vector = new Vec4#E#(3, 2, 5, 6);
        Assert.assertEquals(vector, vector.clone());
    }

    @Test
    public void testVectorFromN() {
        Vec4#E# vector = Vec4#E#.from(1);
        TestUtil#E#.assertEquals(vector, 1, 1, 1, 1);
    }

    @Test
    public void testVectorFromXYZW() {
        Vec4#E# vector = Vec4#E#.from(1, 2, 3, 4);
        TestUtil#E#.assertEquals(vector, 1, 2, 3, 4);
    }
}
