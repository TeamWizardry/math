package com.flowpowered.math.test.vector;

import static com.flowpowered.math.test.TestUtil#E#.SQRT2;
import static com.flowpowered.math.test.TestUtil#E#.SQRT5;

import java.util.Random;

import org.junit.Assert;
import org.junit.Test;

import com.flowpowered.math.TrigMath;
import com.flowpowered.math.test.TestUtil#E#;
import com.flowpowered.math.vector.Vec2#E#;
import com.flowpowered.math.vector.Vec3#E#;
import com.flowpowered.math.vector.Vec4#E#;
import com.flowpowered.math.vector.VecN#E#;

public class Vec3#E#Test {
    @Test
    public void testEmptyConstructor() {
        Vec3#E# vector = new Vec3#E#();
        TestUtil#E#.assertEquals(vector, 0, 0, 0);
    }

    @Test
    public void testCopyVec2DefaultZConstructor() {
        Vec3#E# vector = new Vec3#E#(new Vec2#E#(0, 1));
        TestUtil#E#.assertEquals(vector, 0, 1, 0);
    }

    @Test
    public void testCopyVec2DoubleZConstructor() {
        Vec3#E# vector = new Vec3#E#(new Vec2#E#(0, 1), 3d);
        TestUtil#E#.assertEquals(vector, 0, 1, 3);
    }

    @Test
    public void testCopyVec2FloatZConstructor() {
        Vec3#E# vector = new Vec3#E#(new Vec2#E#(0, 1), 3);
        TestUtil#E#.assertEquals(vector, 0, 1, 3);
    }

    @Test
    public void testCopyVec3Constructor() {
        Vec3#E# vector = new Vec3#E#(new Vec3#E#(0, 1, 2));
        TestUtil#E#.assertEquals(vector, 0, 1, 2);
    }

    @Test
    public void testCopyVec4Constructor() {
        Vec3#E# vector = new Vec3#E#(new Vec4#E#(0, 1, 2, 3));
        TestUtil#E#.assertEquals(vector, 0, 1, 2);
    }

    @Test
    public void testCopyVecNConstructor() {
        Vec3#E# vector = new Vec3#E#(new VecN#E#(0, 1, 2, 3, 4));
        TestUtil#E#.assertEquals(vector, 0, 1, 2);
    }

    @Test
    public void testDoubleComponentsConstructor() {
        Vec3#E# vector = new Vec3#E#(0.5, 1.7, 3.8);
        TestUtil#E#.assertEquals(vector, (#e#) 0.5, (#e#) 1.7, (#e#) 3.8);
    }

    @Test
    public void testFloatComponentsConstructor() {
        Vec3#E# vector = new Vec3#E#(0.5f, 1.7f, 3.8f);
        TestUtil#E#.assertEquals(vector, 0.5f, 1.7f, 3.8f);
    }

    @Test
    public void testPooledWholeNumberConstructor() {
        Vec3#E# vector = Vec3#E#.createPooled(0, 0, 0);
        TestUtil#E#.assertEquals(vector, 0, 0, 0);
        Assert.assertSame(vector, Vec3#E#.createPooled(0, 0, 0));

        vector = Vec3#E#.createPooled(2, 0, 5);
        TestUtil#E#.assertEquals(vector, 2, 0, 5);
        Assert.assertSame(vector, Vec3#E#.createPooled(2, 0, 5));
    }

    @Test
    public void testPooledFractionalConstructor() {
        Vec3#E# vector = Vec3#E#.createPooled(0, 0, (#e#) 0.5);
        TestUtil#E#.assertEquals(vector, 0, 0, (#e#) 0.5);
        Assert.assertNotSame(vector, Vec3#E#.createPooled(0, 0, (#e#) 0.5));
    }

    @Test
    public void testPooledOutsideBoundsConstructor() {
        Vec3#E# vector = Vec3#E#.createPooled(1000, 1000, 1000);
        TestUtil#E#.assertEquals(vector, 1000, 1000, 1000);
        Assert.assertNotSame(vector, Vec3#E#.createPooled(1000, 1000, 1000));

        vector = Vec3#E#.createPooled(#EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE);
        TestUtil#E#.assertEquals(vector, #EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE);
        Assert.assertNotSame(vector, Vec3#E#.createPooled(#EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE));
    }

    @Test
    public void testGetters() {
        Vec3#E# vector = new Vec3#E#(0.5, 1.7, 3.8);
        TestUtil#E#.assertEquals(vector.getX(), (#e#) 0.5);
        TestUtil#E#.assertEquals(vector.getY(), (#e#) 1.7);
        TestUtil#E#.assertEquals(vector.getZ(), (#e#) 3.8);
    }

    @Test
    public void testFloorGetters() {
        Vec3#E# vector = new Vec3#E#(0.5, 1.7, 3.8);
        TestUtil#E#.assertEquals(vector.getFloorX(), 0);
        TestUtil#E#.assertEquals(vector.getFloorY(), 1);
        TestUtil#E#.assertEquals(vector.getFloorZ(), 3);
    }

    @Test
    public void testVec3Addition() {
        Vec3#E# vector = new Vec3#E#(0, 1, 1).add(new Vec3#E#(5.5, -0.5, 3.8));
        TestUtil#E#.assertEquals(vector, (#e#) 5.5, (#e#) 0.5, (#e#) 4.8);
    }

    @Test
    public void testDoubleComponentsAddition() {
        Vec3#E# vector = new Vec3#E#(0, 1, 5).add(5.5, -0.5, 3.8);
        TestUtil#E#.assertEquals(vector, (#e#) 5.5, (#e#) 0.5, (#e#) 8.8);
    }

    @Test
    public void testFloatComponentsAddition() {
        Vec3#E# vector = new Vec3#E#(0, 1, 5).add(5.5f, -0.5f, 3.8f);
        TestUtil#E#.assertEquals(vector, 5.5f, 0.5f, (#e#) 8.8);
    }

    @Test
    public void testVec3Subtraction() {
        Vec3#E# vector = new Vec3#E#(10, 5, 1).sub(new Vec3#E#(9, 4.5, 2));
        TestUtil#E#.assertEquals(vector, 1, (#e#) 0.5, -1);
    }

    @Test
    public void testDoubleComponentsSubtraction() {
        Vec3#E# vector = new Vec3#E#(10, 5, 1).sub(9, 4.5, 2);
        TestUtil#E#.assertEquals(vector, 1, (#e#) 0.5, -1);
    }

    @Test
    public void testFloatComponentsSubtraction() {
        Vec3#E# vector = new Vec3#E#(10, 5, 1).sub(9, 4.5f, 2);
        TestUtil#E#.assertEquals(vector, 1f, 0.5f, -1f);
    }

    @Test
    public void testDoubleFactorMultiplication() {
        Vec3#E# vector = new Vec3#E#(2, 3, 4).mul(1.5);
        TestUtil#E#.assertEquals(vector, 3, (#e#) 4.5, 6);
    }

    @Test
    public void testFloatFactorMultiplication() {
        Vec3#E# vector = new Vec3#E#(2, 3, 4).mul(1.5f);
        TestUtil#E#.assertEquals(vector, 3, 4.5f, 6);
    }

    @Test
    public void testVec3Multiplication() {
        Vec3#E# vector = new Vec3#E#(2, 3, 4).mul(new Vec3#E#(1.5, 2.5, 3.5));
        TestUtil#E#.assertEquals(vector, 3, (#e#) 7.5, 14);
    }

    @Test
    public void testDoubleComponentsMultiplication() {
        Vec3#E# vector = new Vec3#E#(2, 3, 4).mul(1.5, 2.5, 3.5);
        TestUtil#E#.assertEquals(vector, 3, (#e#) 7.5, 14);
    }

    @Test
    public void testFloatComponentsMultiplication() {
        Vec3#E# vector = new Vec3#E#(2, 3, 4).mul(1.5f, 2.5f, 3.5f);
        TestUtil#E#.assertEquals(vector, 3, (#e#) 7.5, 14);
    }

    @Test
    public void testDoubleFactorDivision() {
        Vec3#E# vector = new Vec3#E#(2, 3, 4).div(2d);
        TestUtil#E#.assertEquals(vector, 1, (#e#) 1.5, 2);
    }

    @Test
    public void testFloatFactorDivision() {
        Vec3#E# vector = new Vec3#E#(2, 3, 4).div(2);
        TestUtil#E#.assertEquals(vector, 1, 1.5f, 2);
    }

    @Test
    public void testVec3Division() {
        Vec3#E# vector = new Vec3#E#(2, 6, 12).div(new Vec3#E#(2, 4, 8));
        TestUtil#E#.assertEquals(vector, 1, (#e#) 1.5, (#e#) 1.5);
    }

    @Test
    public void testDoubleComponentsDivision() {
        Vec3#E# vector = new Vec3#E#(2, 6, 16).div(2d, 4d, 8d);
        TestUtil#E#.assertEquals(vector, 1, (#e#) 1.5, 2);
    }

    @Test
    public void testFloatComponentsDivision() {
        Vec3#E# vector = new Vec3#E#(2, 6, 16).div(2, 4, 8);
        TestUtil#E#.assertEquals(vector, 1, 1.5f, 2);
    }

    @Test
    public void testVec3DotProduct() {
        #e# f = new Vec3#E#(2, 3, 4).dot(new Vec3#E#(4, 5, 6));
        TestUtil#E#.assertEquals(f, 47);
    }

    @Test
    public void testDoubleComponentsDotProduct() {
        #e# f = new Vec3#E#(2, 3, 4).dot(4d, 5d, 6d);
        TestUtil#E#.assertEquals(f, 47);
    }

    @Test
    public void testFloatComponentsDotProduct() {
        #e# f = new Vec3#E#(2, 3, 4).dot(4, 5, 6);
        TestUtil#E#.assertEquals(f, 47);
    }

    @Test
    public void testVec3Project() {
        Vec3#E# vector = new Vec3#E#(2, 3, 4).project(new Vec3#E#(1, 1, 1));
        TestUtil#E#.assertEquals(vector, 3, 3, 3);
    }

    @Test
    public void testDoubleComponentsProject() {
        Vec3#E# vector = new Vec3#E#(2, 3, 4).project(1d, 1d, 1d);
        TestUtil#E#.assertEquals(vector, 3, 3, 3);
    }

    @Test
    public void testFloatComponentsProject() {
        Vec3#E# vector = new Vec3#E#(2, 3, 4).project(1, 1, 1);
        TestUtil#E#.assertEquals(vector, 3, 3, 3);
    }

    @Test
    public void testVec3Cross() {
        Vec3#E# f = new Vec3#E#(2, 3, 4).cross(new Vec3#E#(4, 5, 6.5));
        TestUtil#E#.assertEquals(f, (#e#) -0.5, 3, -2);
    }

    @Test
    public void testDoubleComponentsCross() {
        Vec3#E# f = new Vec3#E#(2, 3, 4).cross(4, 5, 6.5);
        TestUtil#E#.assertEquals(f, (#e#) -0.5, 3, -2);
    }

    @Test
    public void testFloatComponentsCross() {
        Vec3#E# f = new Vec3#E#(2, 3, 4).cross(4, 5, 6.5f);
        TestUtil#E#.assertEquals(f, -0.5f, 3, -2);
    }

    @Test
    public void testRaiseToFloatPower() {
        Vec3#E# vector = new Vec3#E#(2, 6, 8).pow(2);
        TestUtil#E#.assertEquals(vector, 4f, 36f, 64f);
    }

    @Test
    public void testRaiseToDoublePower() {
        Vec3#E# vector = new Vec3#E#(2, 6, 8).pow(2d);
        TestUtil#E#.assertEquals(vector, 4, 36, 64);
    }

    @Test
    public void testCeiling() {
        Vec3#E# vector = new Vec3#E#(2.5, 6.7, 7.9).ceil();
        TestUtil#E#.assertEquals(vector, 3, 7, 8);
    }

    @Test
    public void testFloor() {
        Vec3#E# vector = new Vec3#E#(2.5, 6.7, 7.8).floor();
        TestUtil#E#.assertEquals(vector, 2, 6, 7);
    }

    @Test
    public void testRound() {
        Vec3#E# vector = new Vec3#E#(2.2, 6.7, 7.8).round();
        TestUtil#E#.assertEquals(vector, 2, 7, 8);
    }

    @Test
    public void testAbsolute() {
        Vec3#E# vector1 = new Vec3#E#(-2.5, -6.7, -55).abs();
        TestUtil#E#.assertEquals(vector1, (#e#) 2.5, (#e#) 6.7, 55);
        Vec3#E# Vec2 = new Vec3#E#(2.5, 6.7, 55).abs();
        TestUtil#E#.assertEquals(Vec2, (#e#) 2.5, (#e#) 6.7, 55);
    }

    @Test
    public void testNegate() {
        Vec3#E# vector = new Vec3#E#(2.2, -6.7, 15.8).negate();
        TestUtil#E#.assertEquals(vector, (#e#) -2.2, (#e#) 6.7, (#e#) -15.8);
    }

    @Test
    public void testVec3Minimum() {
        Vec3#E# vector = new Vec3#E#(2, 6, -1).min(new Vec3#E#(3, 4, 10));
        TestUtil#E#.assertEquals(vector, 2, 4, -1);
    }

    @Test
    public void testDoubleComponentsMinimum() {
        Vec3#E# vector = new Vec3#E#(2, 6, 10).min(3d, 4d, -5d);
        TestUtil#E#.assertEquals(vector, 2, 4, -5);
    }

    @Test
    public void testFloatComponentsMinimum() {
        Vec3#E# vector = new Vec3#E#(2, 6, 10).min(3, 4, -5);
        TestUtil#E#.assertEquals(vector, 2, 4, -5);
    }

    @Test
    public void testVec3Maximum() {
        Vec3#E# vector = new Vec3#E#(2, 6, 10).max(new Vec3#E#(3, 4, -5));
        TestUtil#E#.assertEquals(vector, 3, 6, 10);
    }

    @Test
    public void testDoubleComponentsMaximum() {
        Vec3#E# vector = new Vec3#E#(2, 6, 10).max(3d, 4d, -5d);
        TestUtil#E#.assertEquals(vector, 3, 6, 10);
    }

    @Test
    public void testFloatComponentsMaximum() {
        Vec3#E# vector = new Vec3#E#(2, 6, 10).max(3, 4, -5);
        TestUtil#E#.assertEquals(vector, 3, 6, 10);
    }

    @Test
    public void testVec3DistanceSquared() {
        #e# f = new Vec3#E#(2, 3, 4).distanceSquared(new Vec3#E#(5, 6, 7));
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void testDoubleComponentsDistanceSquared() {
        #e# f = new Vec3#E#(2, 3, 4).distanceSquared(5d, 6d, 7d);
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void testFloatComponentsDistanceSquared() {
        #e# f = new Vec3#E#(2, 3, 4).distanceSquared(5, 6, 7);
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void testVec3Distance() {
        #e# f = new Vec3#E#(0, 2, 4).distance(new Vec3#E#(0, 8, 16));
        TestUtil#E#.assertEquals(f, 6 * SQRT5);
    }

    @Test
    public void testDoubleComponentsDistance() {
        #e# f = new Vec3#E#(0, 2, 4).distance(0d, 8d, 16d);
        TestUtil#E#.assertEquals(f, 6 * SQRT5);
    }

    @Test
    public void testFloatComponentsDistance() {
        #e# f = new Vec3#E#(0, 2, 4).distance(0, 8, 16);
        TestUtil#E#.assertEquals(f,  6 * SQRT5);
    }

    @Test
    public void testLength() {
        #e# f = new Vec3#E#(3, 4, 5).length();
        TestUtil#E#.assertEquals(f, 5 * SQRT2);
    }

    @Test
    public void testLengthSquared() {
        #e# f = new Vec3#E#(3, 4, 5).lengthSquared();
        TestUtil#E#.assertEquals(f, 50);
    }

    @Test
    public void testNormalize() {
        Vec3#E# vector = new Vec3#E#(2, 2, 0).normalize();
        TestUtil#E#.assertEquals(vector, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO, 0);
        try {
            Vec3#E#.ZERO.normalize();
            Assert.fail();
        } catch (ArithmeticException ex) {
        }
    }

    @Test
    public void testGetMinAxis() {
        Vec3#E# vector1 = new Vec3#E#(1, 2, 3);
        TestUtil#E#.assertEquals(vector1.getMinAxis(), 0);
        Vec3#E# Vec2 = new Vec3#E#(2, 1, 3);
        TestUtil#E#.assertEquals(Vec2.getMinAxis(), 1);
        Vec3#E# Vec3 = new Vec3#E#(3, 2, 1);
        TestUtil#E#.assertEquals(Vec3.getMinAxis(), 2);
    }

    @Test
    public void testGetMaxAxis() {
        Vec3#E# vector1 = new Vec3#E#(3, 1, 2);
        TestUtil#E#.assertEquals(vector1.getMaxAxis(), 0);
        Vec3#E# Vec2 = new Vec3#E#(1, 3, 2);
        TestUtil#E#.assertEquals(Vec2.getMaxAxis(), 1);
        Vec3#E# Vec3 = new Vec3#E#(1, 2, 3);
        TestUtil#E#.assertEquals(Vec3.getMaxAxis(), 2);
    }

    @Test
    public void testConvertToVec2() {
        Vec2#E# vector = new Vec3#E#(1, 2, 3).toVec2();
        TestUtil#E#.assertEquals(vector, 1, 2);
    }

    @Test
    public void testConvertToVec4DefaultW() {
        Vec4#E# vector = new Vec3#E#(1, 2, 3).toVec4();
        TestUtil#E#.assertEquals(vector, 1, 2, 3, 0);
    }

    @Test
    public void testConvertToVec4FloatW() {
        Vec4#E# vector = new Vec3#E#(1, 2, 3).toVec4(4);
        TestUtil#E#.assertEquals(vector, 1, 2, 3, 4);
    }

    @Test
    public void testConvertToVec4DoubleW() {
        Vec4#E# vector = new Vec3#E#(1, 2, 3).toVec4(4d);
        TestUtil#E#.assertEquals(vector, 1, 2, 3, 4);
    }

    @Test
    public void testConvertToVecN() {
        VecN#E# vector = new Vec3#E#(1, 2, 3).toVecN();
        TestUtil#E#.assertEquals(vector, 1, 2, 3);
    }

    @Test
    public void testConvertToArray() {
        #e#[] array = new Vec3#E#(1, 2, 3).toArray();
        TestUtil#E#.assertEquals(array, 1, 2, 3);
    }

    @Test
    public void testComparison() {
        int c1 = new Vec3#E#(10, 20, 30).compareTo(new Vec3#E#(20, 20, 30));
        Assert.assertTrue(c1 < 0);
        int c2 = new Vec3#E#(10, 20, 30).compareTo(new Vec3#E#(10, 20, 30));
        Assert.assertTrue(c2 == 0);
        int c3 = new Vec3#E#(10, 20, 30).compareTo(new Vec3#E#(10, 10, 30));
        Assert.assertTrue(c3 > 0);
        int c4 = new Vec3#E#(0.2, 0.2, 0.2).compareTo(new Vec3#E#(0.1, 0.1, 0.1));
        Assert.assertTrue(c4 > 0);
    }

    @Test
    public void testEquals() {
        Assert.assertTrue(new Vec3#E#(122, 43, 96).equals(new Vec3#E#(122, 43, 96)));
        Assert.assertFalse(new Vec3#E#(122, 43, 96).equals(new Vec3#E#(378, 95, 96)));
    }

    @Test
    public void testCloning() {
        Vec3#E# vector = new Vec3#E#(3, 2, 5);
        Assert.assertEquals(vector, vector.clone());
    }

    @Test
    public void testVectorFromN() {
        Vec3#E# vector = Vec3#E#.from(1);
        TestUtil#E#.assertEquals(vector, 1, 1, 1);
    }

    @Test
    public void testVectorFromXYZ() {
        Vec3#E# vector = Vec3#E#.from(1, 2, 3);
        TestUtil#E#.assertEquals(vector, 1, 2, 3);
    }

    @Test
    public void testCreateDirectionFromRandom() {
        Random random = new Random(0xF5514E866AA4L);
        for (int i = 0; i < 10; i++) {
            Vec3#E# vector = Vec3#E#.createRandomDirection(random);
            TestUtil#E#.assertEquals(vector.length(), 1);
        }
    }

    @Test
    public void testCreateDirectionFromDoubleAnglesDegrees() {
        Vec3#E# vector1 = Vec3#E#.createDirectionDeg(0d, 0d);
        TestUtil#E#.assertEquals(vector1, 0, 0, 1);
        Vec3#E# Vec2 = Vec3#E#.createDirectionDeg(45d, 90d);
        TestUtil#E#.assertEquals(Vec2, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO, 0);
        Vec3#E# Vec3 = Vec3#E#.createDirectionDeg(90d, 90d);
        TestUtil#E#.assertEquals(Vec3, 0, 1, 0);
        Vec3#E# Vec4 = Vec3#E#.createDirectionDeg(180d, 180d);
        TestUtil#E#.assertEquals(Vec4, 0, 0, -1);
        Vec3#E# vector5 = Vec3#E#.createDirectionDeg(270d, 270d);
        TestUtil#E#.assertEquals(vector5, 0, 1, 0);
        Vec3#E# vector6 = Vec3#E#.createDirectionDeg(360d, 360d);
        TestUtil#E#.assertEquals(vector6, 0, 0, 1);
    }

    @Test
    public void testCreateDirectionFromFloatAnglesDegrees() {
        Vec3#E# vector1 = Vec3#E#.createDirectionDeg(0, 0);
        TestUtil#E#.assertEquals(vector1, 0, 0, 1);
        Vec3#E# Vec2 = Vec3#E#.createDirectionDeg(45, 90);
        TestUtil#E#.assertEquals(Vec2, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO, 0);
        Vec3#E# Vec3 = Vec3#E#.createDirectionDeg(90, 90);
        TestUtil#E#.assertEquals(Vec3, 0, 1, 0);
        Vec3#E# Vec4 = Vec3#E#.createDirectionDeg(180, 180);
        TestUtil#E#.assertEquals(Vec4, 0, 0, -1);
        Vec3#E# vector5 = Vec3#E#.createDirectionDeg(270, 270);
        TestUtil#E#.assertEquals(vector5, 0, 1, 0);
        Vec3#E# vector6 = Vec3#E#.createDirectionDeg(360, 360);
        TestUtil#E#.assertEquals(vector6, 0, 0, 1);
    }

    @Test
    public void testCreateDirectionFromDoubleAnglesRadians() {
        Vec3#E# vector1 = Vec3#E#.createDirectionRad(0d, 0d);
        TestUtil#E#.assertEquals(vector1, 0, 0, 1);
        Vec3#E# Vec2 = Vec3#E#.createDirectionRad(TrigMath.QUARTER_PI, TrigMath.HALF_PI);
        TestUtil#E#.assertEquals(Vec2, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO, 0);
        Vec3#E# Vec3 = Vec3#E#.createDirectionRad(TrigMath.HALF_PI, TrigMath.HALF_PI);
        TestUtil#E#.assertEquals(Vec3, 0, 1, 0);
        Vec3#E# Vec4 = Vec3#E#.createDirectionRad(TrigMath.PI, TrigMath.PI);
        TestUtil#E#.assertEquals(Vec4, 0, 0, -1);
        Vec3#E# vector5 = Vec3#E#.createDirectionRad(TrigMath.THREE_PI_HALVES, TrigMath.THREE_PI_HALVES);
        TestUtil#E#.assertEquals(vector5, 0, 1, 0);
        Vec3#E# vector6 = Vec3#E#.createDirectionRad(TrigMath.TWO_PI, TrigMath.TWO_PI);
        TestUtil#E#.assertEquals(vector6, 0, 0, 1);
    }

    @Test
    public void testCreateDirectionFromFloatAnglesRadians() {
        Vec3#E# vector1 = Vec3#E#.createDirectionRad(0, 0);
        TestUtil#E#.assertEquals(vector1, 0, 0, 1);
        Vec3#E# Vec2 = Vec3#E#.createDirectionRad((float) TrigMath.QUARTER_PI, (float) TrigMath.HALF_PI);
        TestUtil#E#.assertEquals(Vec2, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO, 0);
        Vec3#E# Vec3 = Vec3#E#.createDirectionRad((float) TrigMath.HALF_PI, (float) TrigMath.HALF_PI);
        TestUtil#E#.assertEquals(Vec3, 0, 1, 0);
        Vec3#E# Vec4 = Vec3#E#.createDirectionRad((float) TrigMath.PI, (float) TrigMath.PI);
        TestUtil#E#.assertEquals(Vec4, 0, 0, -1);
        Vec3#E# vector5 = Vec3#E#.createDirectionRad((float) TrigMath.THREE_PI_HALVES, (float) TrigMath.THREE_PI_HALVES);
        TestUtil#E#.assertEquals(vector5, 0, 1, 0);
        Vec3#E# vector6 = Vec3#E#.createDirectionRad((float) TrigMath.TWO_PI, (float) TrigMath.TWO_PI);
        TestUtil#E#.assertEquals(vector6, 0, 0, 1);
    }
}
