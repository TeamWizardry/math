package com.flowpowered.math.test.vector;

import static org.junit.Assert.assertEquals;

import org.junit.Assert;
import org.junit.Test;

import com.flowpowered.math.test.#EDecEquiTest#;
import com.flowpowered.math.test.TestUtili;
import com.flowpowered.math.test.TestUtill;
import com.flowpowered.math.vector.Vec2#E#;
import com.flowpowered.math.vector.Vec3#E#;
import com.flowpowered.math.vector.Vec4#E#;
import com.flowpowered.math.vector.VecN#E#;

public class VecN#E#Test {
    @Test
    public void testSizeConstructor() {
        VecN#E# vector = new VecN#E#(5);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 0, (#e#) 0, (#e#) 0, (#e#) 0);
    }

    @Test
    public void testCopyVec2Constructor() {
        VecN#E# vector = new VecN#E#(new Vec2#E#(0, 1));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1);
    }

    @Test
    public void testCopyVec3Constructor() {
        VecN#E# vector = new VecN#E#(new Vec3#E#(0, 1, 2));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testCopyVec4Constructor() {
        VecN#E# vector = new VecN#E#(new Vec4#E#(0, 1, 2, 3));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 2, (#e#) 3);
    }

    @Test
    public void testCopyVecNConstructor() {
        VecN#E# vector = new VecN#E#(new VecN#E#(0, 1, 2, 3, 4, 5));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4, (#e#) 5);
    }

    @Test
    public void testComponentsConstructor() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4, (#e#) 5);
    }

    @Test
    public void testSize() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5);
        assertEquals(vector.size(), (#e#) 6);
    }

    @Test
    public void testGetter() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5);
        TestUtil#E#.assertEquals(vector.get(0), 0);
        TestUtil#E#.assertEquals(vector.get(1), 1);
        TestUtil#E#.assertEquals(vector.get(2), 2);
        TestUtil#E#.assertEquals(vector.get(3), 3);
        TestUtil#E#.assertEquals(vector.get(4), 4);
        TestUtil#E#.assertEquals(vector.get(5), 5);
    }

    @Test
    public void testSetter#ES#Value() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5);
        vector.set(0, (#e#) 6);
        TestUtil#E#.assertEquals(vector.get(0), 6);
    }

    @Test
    public void testSetZero() {
        VecN#E# vector = new VecN#E#(0, 1, 2);
        vector.setZero();
        TestUtil#E#.assertEquals(vector.get(0), 0);
        TestUtil#E#.assertEquals(vector.get(1), 0);
        TestUtil#E#.assertEquals(vector.get(2), 0);
    }

    @Test
    public void testResize() {
        VecN#E# vector1 = new VecN#E#(0, 1, 2);
        VecN#E# resize1 = vector1.resize(2);
        TestUtili.assertEquals(resize1.size(), 2);
        VecN#E# Vec2 = new VecN#E#(0, 1, 2);
        VecN#E# resize2 = Vec2.resize(4);
        TestUtili.assertEquals(resize2.size(), 4);
    }

    @Test
    public void testVecNAddition() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5).add(new VecN#E#(0, 1, 2, 3, 4, 6));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 2, (#e#) 4, (#e#) 6, (#e#) 8, (#e#) 11);
    }

    @Test
    public void test#ES#ComponentsAddition() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5).add((#e#) 0, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4, (#e#) 6);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 2, (#e#) 4, (#e#) 6, (#e#) 8, (#e#) 11);
    }

    @Test
    public void testVecNSubtraction() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5).sub(new VecN#E#(0, 1, 2, 3, 4, 4));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 0, (#e#) 0, (#e#) 0, (#e#) 0, (#e#) 1);
    }

    @Test
    public void test#ES#ComponentsSubtraction() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5).sub((#e#) 0, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4, (#e#) 4);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 0, (#e#) 0, (#e#) 0, (#e#) 0, (#e#) 1);
    }

    @Test
    public void testDoubleFactorMultiplication() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5).mul(2.1);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 2, (#e#) 4, (#e#) 6, (#e#) 8, (#e#) 10);
    }

    @Test
    public void test#ES#FactorMultiplication() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5).mul((#e#) 2);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 2, (#e#) 4, (#e#) 6, (#e#) 8, (#e#) 10);
    }

    @Test
    public void testVecNMultiplication() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5).mul(new VecN#E#(1, 2, 3, 4, 5, 6));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 2, (#e#) 6, (#e#) 12, (#e#) 20, (#e#) 30);
    }

    @Test
    public void test#ES#ComponentsMultiplication() {
        VecN#E# vector = new VecN#E#(0, 1, 2, 3, 4, 5).mul((#e#) 2, (#e#) 2, (#e#) 3, (#e#) 3, (#e#) 4, (#e#) 4);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 2, (#e#) 6, (#e#) 9, (#e#) 16, (#e#) 20);
    }

    @Test
    public void testDoubleFactorDivision() {
        VecN#E# vector = new VecN#E#(1, 2, 3, 4, 5, 6).div(2.1);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 1, (#e#) 2, (#e#) 2, (#e#) 3);
    }

    @Test
    public void test#ES#FactorDivision() {
        VecN#E# vector = new VecN#E#(1, 2, 3, 4, 5, 6).div(2);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 1, (#e#) 2, (#e#) 2, (#e#) 3);
    }

    @Test
    public void testVecNDivision() {
        VecN#E# vector = new VecN#E#(1, 2, 3, 4, 5, 8).div(new VecN#E#(2, 1, 2, 4, 2, 3));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 2, (#e#) 1, (#e#) 1, (#e#) 2, (#e#) 2);
    }

    @Test
    public void test#ES#ComponentsDivision() {
        VecN#E# vector = new VecN#E#(1, 2, 3, 4, 5, 6).div((#e#) 2, (#e#) 1, (#e#) 2, (#e#) 4, (#e#) 2, (#e#) 3);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 2, (#e#) 1, (#e#) 1, (#e#) 2, (#e#) 2);
    }

    @Test
    public void testVecNDotProduct() {
        #e# f = new VecN#E#(2, 3, 4, 5).dot(new VecN#E#(6, 7, 8, 9));
        TestUtil#E#.assertEquals(f, 110);
    }

    @Test
    public void test#ES#ComponentsDotProduct() {
        #e# f = new VecN#E#(2, 3, 4, 5).dot((#e#) 6, (#e#) 7, (#e#) 8, (#e#) 9);
        TestUtil#E#.assertEquals(f, 110);
    }

    @Test
    public void testVecNProject() {
        VecN#E# vector = new VecN#E#(20, 30, 40, 50).project(new VecN#E#(10, 10, 10, 10));
        TestUtil#E#.assertEquals(vector, 35, 35, 35, 35);
    }

    @Test
    public void testFloatComponentsProject() {
        VecN#E# vector = new VecN#E#(20, 30, 40, 50).project(10, 10, 10, 10);
        TestUtil#E#.assertEquals(vector, 35, 35, 35, 35);
    }

    @Test
    public void testRaiseToDoublePower() {
        VecN#E# vector = new VecN#E#(2, 6, 8, 5).pow(2d);
        TestUtil#E#.assertEquals(vector, (#e#) 4, (#e#) 36, (#e#) 64, (#e#) 25);
    }

    @Test
    public void testRaiseTo#ES#Power() {
        VecN#E# vector = new VecN#E#(2, 6, 8, (#e#) 5.5).pow((#e#) 2);
        TestUtil#E#.assertEquals(vector, (#e#) 4, (#e#) 36, (#e#) 64, (#e#) 25);
    }

    @Test
    public void testAbsolute() {
        VecN#E# vector1 = new VecN#E#(-2, -6, -55, 0).abs();
        TestUtil#E#.assertEquals(vector1, (#e#) 2, (#e#) 6, (#e#) 55, (#e#) 0);
        VecN#E# Vec2 = new VecN#E#(2, 6, 55, 0).abs();
        TestUtil#E#.assertEquals(Vec2, (#e#) 2, (#e#) 6, (#e#) 55, (#e#) 0);
    }

    @Test
    public void testNegate() {
        VecN#E# vector = new VecN#E#(2, -6, 15, 20).negate();
        TestUtil#E#.assertEquals(vector, (#e#) -2, (#e#) 6, (#e#) -15, (#e#) -20);
    }

    @Test
    public void testVecNMinimum() {
        VecN#E# vector = new VecN#E#(2, 6, -1, 0).min(new VecN#E#(3, 4, 10, -1));
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 4, (#e#) -1, (#e#) -1);
    }

    @Test
    public void test#ES#ComponentsMinimum() {
        VecN#E# vector = new VecN#E#(2, 6, -1, 0).min((#e#) 3, (#e#) 4, (#e#) 10, (#e#) -1);
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 4, (#e#) -1, (#e#) -1);
    }

    @Test
    public void testVecNMaximum() {
        VecN#E# vector = new VecN#E#(2, 6, -1, 0).max(new VecN#E#(3, 4, 10, -1));
        TestUtil#E#.assertEquals(vector, (#e#) 3, (#e#) 6, (#e#) 10, (#e#) 0);
    }

    @Test
    public void test#ES#ComponentsMaximum() {
        VecN#E# vector = new VecN#E#(2, 6, -1, 0).max((#e#) 3, (#e#) 4, (#e#) 10, (#e#) -1);
        TestUtil#E#.assertEquals(vector, (#e#) 3, (#e#) 6, (#e#) 10, (#e#) 0);
    }

    @Test
    public void testVecNDistanceSquared() {
        #e# f = new VecN#E#(2, 3, 4).distanceSquared(new VecN#E#(5, 6, 7));
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void test#ES#ComponentsDistanceSquared() {
        #e# f = new VecN#E#(2, 3, 4, 5).distanceSquared((#e#) 5, (#e#) 6, (#e#) 7, (#e#) 5);
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void testVecNDistance() {
        #EDecEqui# f = new VecN#E#(0, 6, 13, 8).distance(new VecN#E#(2, 8, 16, 16));
        #EDecEquiTest#.assertEquals(f, 9);
    }

    @Test
    public void test#ES#ComponentsDistance() {
        #EDecEqui# f = new VecN#E#(0, 6, 13, 8).distance((#e#) 2, (#e#) 8, (#e#) 16, (#e#) 16);
        #EDecEquiTest#.assertEquals(f, 9);
    }

    @Test
    public void testLength() {
        #EDecEqui# f = new VecN#E#(2, 2, 3, 8).length();
        #EDecEquiTest#.assertEquals(f, 9);
    }

    @Test
    public void testLengthSquared() {
        #e# f = new VecN#E#(3, 4, 5, 6).lengthSquared();
        TestUtil#E#.assertEquals(f, 86);
    }

    @Test
    public void testGetMinAxis() {
        VecN#E# vector1 = new VecN#E#(1, 2, 3, 4);
        TestUtili.assertEquals(vector1.getMinAxis(), 0);
        VecN#E# Vec2 = new VecN#E#(2, 1, 3, 4);
        TestUtili.assertEquals(Vec2.getMinAxis(), 1);
        VecN#E# Vec3 = new VecN#E#(3, 2, 1, 4);
        TestUtili.assertEquals(Vec3.getMinAxis(), 2);
        VecN#E# Vec4 = new VecN#E#(4, 2, 3, 1);
        TestUtili.assertEquals(Vec4.getMinAxis(), 3);
    }

    @Test
    public void testGetMaxAxis() {
        VecN#E# vector1 = new VecN#E#(4, 2, 3, 1);
        TestUtili.assertEquals(vector1.getMaxAxis(), 0);
        VecN#E# Vec2 = new VecN#E#(1, 4, 3, 2);
        TestUtili.assertEquals(Vec2.getMaxAxis(), 1);
        VecN#E# Vec3 = new VecN#E#(1, 2, 4, 3);
        TestUtili.assertEquals(Vec3.getMaxAxis(), 2);
        VecN#E# Vec4 = new VecN#E#(1, 2, 3, 4);
        TestUtili.assertEquals(Vec4.getMaxAxis(), 3);
    }

    @Test
    public void testConvertToVec2() {
        VecN#E# vector = new VecN#E#(1, 2, 3, 4);
        TestUtil#E#.assertEquals(vector.toVec2(), 1, 2);
    }

    @Test
    public void testConvertToVec3() {
        VecN#E# vector = new VecN#E#(1, 2, 3, 4);
        TestUtil#E#.assertEquals(vector.toVec3(), 1, 2, 3);
    }

    @Test
    public void testConvertToVec4() {
        VecN#E# vector = new VecN#E#(1, 2, 3, 4);
        TestUtil#E#.assertEquals(vector.toVec4(), 1, 2, 3, 4);
    }

    @Test
    public void testConvertToVectorInteger() {
        VecN#E# vector = new VecN#E#(1, 2, 3, 4);
        TestUtili.assertEquals(vector.toInt(), 1, 2, 3, 4);
    }

    @Test
    public void testConvertToVectorLong() {
        VecN#E# vector = new VecN#E#(1, 2, 3, 4);
        TestUtill.assertEquals(vector.toLong(), 1, 2, 3, 4);
    }

    @Test
    public void testConvertToArray() {
        #e#[] array = new VecN#E#(1, 2, 3, 4).toArray();
        TestUtil#E#.assertEquals(array, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4);
    }

    @Test
    public void testComparison() {
        int c1 = new VecN#E#(10, 20, 30, 40).compareTo(new VecN#E#(20, 20, 30, 40));
        Assert.assertTrue(c1 < 0);
        int c2 = new VecN#E#(10, 20, 30, 40).compareTo(new VecN#E#(10, 20, 30, 40));
        Assert.assertTrue(c2 == 0);
        int c3 = new VecN#E#(10, 20, 30, 40).compareTo(new VecN#E#(10, 10, 30, 40));
        Assert.assertTrue(c3 > 0);
    }

    @Test
    public void testEquals() {
        Assert.assertTrue(new VecN#E#(1, 2, 3).equals(new VecN#E#(1, 2, 3)));
        Assert.assertFalse(new VecN#E#(1, 2, 3).equals(new VecN#E#(2, 2, 3)));
    }

    @Test
    public void testCloning() {
        VecN#E# vector = new VecN#E#(1, 2, 3);
        Assert.assertEquals(vector, vector.clone());
    }
}
