package com.flowpowered.math.test;

import org.junit.Assert;

import com.flowpowered.math.vector.Vec2#E#;
import com.flowpowered.math.vector.Vec3#E#;
import com.flowpowered.math.vector.Vec4#E#;
import com.flowpowered.math.vector.VecN#E#;

public class TestUtil#E# {
    public static void assertEquals(#e# value, #e# expected) {
        Assert.assertEquals(expected, value);
    }

    public static void assertEquals(#e# value, #EOverload# expected) {
        assertEquals(value, (#e#) expected);
    }
    public static void assertEquals(Vec2#E# v, #e# x, #e# y) {
        assertEquals(v.getX(), x);
        assertEquals(v.getY(), y);
    }

    public static void assertEquals(Vec2#E# v, #EOverload# x, #EOverload# y) {
        assertEquals(v, (#e#) x, (#e#) y);
    }

    public static void assertEquals(Vec3#E# v, #e# x, #e# y, #e# z) {
        assertEquals(v.getX(), x);
        assertEquals(v.getY(), y);
        assertEquals(v.getZ(), z);
    }

    public static void assertEquals(Vec3#E# v, #EOverload# x, #EOverload# y, #EOverload# z) {
            assertEquals(v, (#e#) x, (#e#) y, (#e#) z);
        }

    public static void assertEquals(Vec4#E# v, #e# x, #e# y, #e# z, #e# w) {
        assertEquals(v.getX(), x);
        assertEquals(v.getY(), y);
        assertEquals(v.getZ(), z);
        assertEquals(v.getW(), w);
    }

    public static void assertEquals(Vec4#E# v, #EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        assertEquals(v, (#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    public static void assertEquals(VecN#E# v, #e#... f) {
        Assert.assertArrayEquals(f, v.toArray());
    }

    public static void assertEquals(#e#[] a, #e#... f) {
        Assert.assertArrayEquals(f, a);
    }
}
