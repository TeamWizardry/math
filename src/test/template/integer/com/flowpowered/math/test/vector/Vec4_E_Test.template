package com.flowpowered.math.test.vector;

import org.junit.Assert;
import org.junit.Test;

import com.flowpowered.math.test.TestUtil#E#;
import com.flowpowered.math.test.#EDecEquiTest#;
import com.flowpowered.math.test.TestUtili;
import com.flowpowered.math.vector.Vec2#E#;
import com.flowpowered.math.vector.Vec3#E#;
import com.flowpowered.math.vector.Vec4#E#;
import com.flowpowered.math.vector.VecN#E#;

public class Vec4#E#Test {
    @Test
    public void testEmptyConstructor() {
        Vec4#E# vector = new Vec4#E#();
        TestUtil#E#.assertEquals(vector, 0, 0, 0, 0);
    }

    @Test
    public void testCopyVec2DefaultZWConstructor() {
        Vec4#E# vector = new Vec4#E#(new Vec2#E#(0, 1));
        TestUtil#E#.assertEquals(vector, 0, 1, 0, 0);
    }

    @Test
    public void testCopyVec2#ES#ZWConstructor() {
        Vec4#E# vector = new Vec4#E#(new Vec2#E#(0, 1), (#e#) 1, (#e#) 2);
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 2);
    }

    @Test
    public void testCopyVec3DefaultWConstructor() {
        Vec4#E# vector = new Vec4#E#(new Vec3#E#(0, 1, 1));
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 0);
    }

    @Test
    public void testCopyVec3#ES#WConstructor() {
        Vec4#E# vector = new Vec4#E#(new Vec3#E#(0, 1, 1), (#e#) 2);
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 2);
    }

    @Test
    public void testCopyVec4Constructor() {
        Vec4#E# vector = new Vec4#E#(new Vec4#E#(0, 1, 1, 2));
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 2);
    }

    @Test
    public void testCopyVecNConstructor() {
        Vec4#E# vector = new Vec4#E#(new VecN#E#(0, 1, 1, 2, 5));
        TestUtil#E#.assertEquals(vector, 0, 1, 1, 2);
    }

    @Test
    public void testDoubleComponentsConstructor() {
        Vec4#E# vector = new Vec4#E#(0.5, 1.7, 3.8, 5.5);
        TestUtil#E#.assertEquals(vector, 0, 1, 3, 5);
    }

    @Test
    public void test#ES#ComponentsConstructor() {
        Vec4#E# vector = new Vec4#E#((#e#) 0, (#e#) 1, (#e#) 3, (#e#) 5);
        TestUtil#E#.assertEquals(vector, 0, 1, 3, 5);
    }

    @Test
    public void testPooledWholeNumberConstructor() {
        Vec4#E# vector = Vec4#E#.createPooled(0, 0, 0, 0);
        TestUtil#E#.assertEquals(vector, 0, 0, 0, 0);
        Assert.assertSame(vector, Vec4#E#.createPooled(0, 0, 0, 0));

        vector = Vec4#E#.createPooled(2, 0, 0, 3);
        TestUtil#E#.assertEquals(vector, 2, 0, 0, 3);
        Assert.assertSame(vector, Vec4#E#.createPooled(2, 0, 0, 3));
    }

    @Test
    public void testPooledOutsideBoundsConstructor() {
        Vec4#E# vector = Vec4#E#.createPooled(1000, 1000, 1000, 1000);
        TestUtil#E#.assertEquals(vector, 1000, 1000, 1000, 1000);
        Assert.assertNotSame(vector, Vec4#E#.createPooled(1000, 1000, 1000, 1000));

        vector = Vec4#E#.createPooled(#EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE);
        TestUtil#E#.assertEquals(vector, #EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE);
        Assert.assertNotSame(vector, Vec4#E#.createPooled(#EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE, #EW#.MAX_VALUE));
    }

    @Test
    public void testGetters() {
        Vec4#E# vector = new Vec4#E#(0, 1, 3, 5);
        TestUtil#E#.assertEquals(vector.getX(), 0);
        TestUtil#E#.assertEquals(vector.getY(), 1);
        TestUtil#E#.assertEquals(vector.getZ(), 3);
        TestUtil#E#.assertEquals(vector.getW(), 5);
    }

    @Test
    public void testVec4Addition() {
        Vec4#E# vector = new Vec4#E#(0, 1, 1, 1).add(new Vec4#E#(5, -2, 3, 5));
        TestUtil#E#.assertEquals(vector, 5, -1, 4, 6);
    }

    @Test
    public void testDoubleComponentsAddition() {
        Vec4#E# vector = new Vec4#E#(0, 1, 1, 1).add(5.5, -2.5, 3.8, 5.5);
        TestUtil#E#.assertEquals(vector, 5, -2, 4, 6);
    }

    @Test
    public void test#ES#ComponentsAddition() {
        Vec4#E# vector = new Vec4#E#(0, 1, 1, 1).add((#e#) 5, (#e#) -2, (#e#) 3, (#e#) 5);
        TestUtil#E#.assertEquals(vector, 5, -1, 4, 6);
    }

    @Test
    public void testVec4Subtraction() {
        Vec4#E# vector = new Vec4#E#(10, 5, 1, 1).sub(new Vec4#E#(9, 4, 2, 1));
        TestUtil#E#.assertEquals(vector, 1, 1, -1, 0);
    }

    @Test
    public void testDoubleComponentsSubtraction() {
        Vec4#E# vector = new Vec4#E#(10, 5, 1, 1).sub(9, 4.5, 2, 1);
        TestUtil#E#.assertEquals(vector, 1, 1, -1, 0);
    }

    @Test
    public void test#ES#ComponentsSubtraction() {
        Vec4#E# vector = new Vec4#E#(10, 5, 1, 1).sub((#e#) 9, (#e#) 4, (#e#) 2, (#e#) 1);
        TestUtil#E#.assertEquals(vector, 1, 1, -1, 0);
    }

    @Test
    public void testDoubleFactorMultiplication() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).mul(2.5);
        TestUtil#E#.assertEquals(vector, 4, 6, 8, 10);
    }

    @Test
    public void test#ES#FactorMultiplication() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).mul((#e#) 2);
        TestUtil#E#.assertEquals(vector, 4, 6, 8, 10);
    }

    @Test
    public void testVec4Multiplication() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).mul(new Vec4#E#(1, 2, 3, 4));
        TestUtil#E#.assertEquals(vector, 2, 6, 12, 20);
    }

    @Test
    public void testDoubleComponentsMultiplication() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).mul(1.1, 2.5, 3.2, 4.3);
        TestUtil#E#.assertEquals(vector, 2, 6, 12, 20);
    }

    @Test
    public void test#ES#ComponentsMultiplication() {
        Vec4#E# vector = new Vec4#E#(2, 3, 4, 5).mul((#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4);
        TestUtil#E#.assertEquals(vector, 2, 6, 12, 20);
    }

    @Test
    public void testDoubleFactorDivision() {
        Vec4#E# vector = new Vec4#E#(2, 3, 5, 7).div(2.1);
        TestUtil#E#.assertEquals(vector, 1, 1, 2, 3);
    }

    @Test
    public void test#ES#FactorDivision() {
        Vec4#E# vector = new Vec4#E#(2, 3, 5, 7).div((#e#) 2);
        TestUtil#E#.assertEquals(vector, 1, 1, 2, 3);
    }

    @Test
    public void testVec4Division() {
        Vec4#E# vector = new Vec4#E#(2, 6, 16, 28).div(new Vec4#E#(2, 4, 8, 9));
        TestUtil#E#.assertEquals(vector, 1, 1, 2, 3);
    }

    @Test
    public void testDoubleComponentsDivision() {
        Vec4#E# vector = new Vec4#E#(2, 6, 16, 28).div(2.5, 4.1, 8.3, 9.2);
        TestUtil#E#.assertEquals(vector, 1, 1, 2, 3);
    }

    @Test
    public void test#ES#ComponentsDivision() {
        Vec4#E# vector = new Vec4#E#(2, 6, 16, 28).div((#e#) 2, (#e#) 4, (#e#) 8, (#e#) 9);
        TestUtil#E#.assertEquals(vector, 1, 1, 2, 3);
    }

    @Test
    public void testVec4DotProduct() {
        #e# f = new Vec4#E#(2, 3, 4, 5).dot(new Vec4#E#(6, 7, 8, 9));
        TestUtil#E#.assertEquals(f, 110);
    }

    @Test
    public void testVec4Project() {
        Vec4#E# vector = new Vec4#E#(20, 30, 40, 50).project(new Vec4#E#(10, 10, 10, 10));
        TestUtil#E#.assertEquals(vector, 35, 35, 35, 35);
    }

    @Test
    public void testDoubleComponentsProject() {
        Vec4#E# vector = new Vec4#E#(20, 30, 40, 50).project(10d, 10d, 10d, 10d);
        TestUtil#E#.assertEquals(vector, 35, 35, 35, 35);
    }

    @Test
    public void testFloatComponentsProject() {
        Vec4#E# vector = new Vec4#E#(20, 30, 40, 50).project(10, 10, 10, 10);
        TestUtil#E#.assertEquals(vector, 35, 35, 35, 35);
    }

    @Test
    public void testDoubleComponentsDotProduct() {
        #e# f = new Vec4#E#(2, 3, 4, 5).dot(6.1, 7.5, 8.3, 9.2);
        TestUtil#E#.assertEquals(f, 110);
    }

    @Test
    public void test#ES#ComponentsDotProduct() {
        #e# f = new Vec4#E#(2, 3, 4, 5).dot(6, 7, 8, 9);
        TestUtil#E#.assertEquals(f, 110);
    }

    @Test
    public void testRaiseTo#ES#Power() {
        Vec4#E# vector = new Vec4#E#(2, 6, 8, 5).pow((#e#) 2);
        TestUtil#E#.assertEquals(vector, 4, 36, 64, 25);
    }

    @Test
    public void testRaiseToDoublePower() {
        Vec4#E# vector = new Vec4#E#(2, 6, 8, 5).pow(2d);
        TestUtil#E#.assertEquals(vector, 4, 36, 64, 25);
    }

    @Test
    public void testAbsolute() {
        Vec4#E# vector1 = new Vec4#E#(-2, -6, -55, 0).abs();
        TestUtil#E#.assertEquals(vector1, 2, 6, 55, 0);
        Vec4#E# Vec2 = new Vec4#E#(2, 6, 55, 0).abs();
        TestUtil#E#.assertEquals(Vec2, 2, 6, 55, 0);
    }

    @Test
    public void testNegate() {
        Vec4#E# vector = new Vec4#E#(2, -6, 15, 20).negate();
        TestUtil#E#.assertEquals(vector, -2, 6, -15, -20);
    }

    @Test
    public void testVec4Minimum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).min(new Vec4#E#(3, 4, 10, -1));
        TestUtil#E#.assertEquals(vector, 2, 4, -1, -1);
    }

    @Test
    public void testDoubleComponentsMinimum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).min(3, 4, 10, -1.1);
        TestUtil#E#.assertEquals(vector, 2, 4, -1, -2);
    }

    @Test
    public void test#ES#ComponentsMinimum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).min((#e#) 3, (#e#) 4, (#e#) 10, (#e#) -1);
        TestUtil#E#.assertEquals(vector, 2, 4, -1, -1);
    }

    @Test
    public void testVec4Maximum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).max(new Vec4#E#(3, 4, 10, -1));
        TestUtil#E#.assertEquals(vector, 3, 6, 10, 0);
    }

    @Test
    public void testDoubleComponentsMaximum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).max(3, 4, 10, -1.1);
        TestUtil#E#.assertEquals(vector, 3, 6, 10, 0);
    }

    @Test
    public void test#ES#ComponentsMaximum() {
        Vec4#E# vector = new Vec4#E#(2, 6, -1, 0).max((#e#) 3, (#e#) 4, (#e#) 10, (#e#) -1);
        TestUtil#E#.assertEquals(vector, 3, 6, 10, 0);
    }

    @Test
    public void testVec4DistanceSquared() {
        #e# f = new Vec4#E#(2, 3, 4, 5).distanceSquared(new Vec4#E#(5, 6, 7, 8));
        TestUtil#E#.assertEquals(f, 36);
    }

    @Test
    public void testDoubleComponentsDistanceSquared() {
        #e# f = new Vec4#E#(2, 3, 4, 1).distanceSquared(5.1, 6.5, 7.3, 1.2);
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void test#ES#ComponentsDistanceSquared() {
        #e# f = new Vec4#E#(2, 3, 4, 5).distanceSquared((#e#) 5, (#e#) 6, (#e#) 7, (#e#) 5);
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void testVec4Distance() {
        #EDecEqui# f = new Vec4#E#(0, 6, 13, 8).distance(new Vec4#E#(2, 8, 16, 16));
        #EDecEquiTest#.assertEquals(f, 9);
    }

    @Test
    public void testDoubleComponentsDistance() {
        #EDecEqui# f = new Vec4#E#(0, 6, 13, 8).distance(new Vec4#E#(2d, 8.3, 16.5, 16.1));
        #EDecEquiTest#.assertEquals(f, 9);
    }

    @Test
    public void test#ES#ComponentsDistance() {
        #EDecEqui# f = new Vec4#E#(0, 6, 13, 8).distance(new Vec4#E#((#e#) 2, (#e#) 8, (#e#) 16, (#e#) 16));
        #EDecEquiTest#.assertEquals(f, 9);
    }

    @Test
    public void testLength() {
        #EDecEqui# f = new Vec4#E#(2, 2, 3, 8).length();
        #EDecEquiTest#.assertEquals(f, 9);
    }

    @Test
    public void testLengthSquared() {
        #e# f = new Vec4#E#(3, 4, 5, 6).lengthSquared();
        TestUtil#E#.assertEquals(f, 86);
    }

    @Test
    public void testGetMinAxis() {
        Vec4#E# vector1 = new Vec4#E#(1, 2, 3, 4);
        TestUtili.assertEquals(vector1.getMinAxis(), 0);
        Vec4#E# Vec2 = new Vec4#E#(2, 1, 3, 4);
        TestUtili.assertEquals(Vec2.getMinAxis(), 1);
        Vec4#E# Vec3 = new Vec4#E#(3, 2, 1, 4);
        TestUtili.assertEquals(Vec3.getMinAxis(), 2);
        Vec4#E# Vec4 = new Vec4#E#(4, 2, 3, 1);
        TestUtili.assertEquals(Vec4.getMinAxis(), 3);
    }

    @Test
    public void testGetMaxAxis() {
        Vec4#E# vector1 = new Vec4#E#(4, 2, 3, 1);
        TestUtili.assertEquals(vector1.getMaxAxis(), 0);
        Vec4#E# Vec2 = new Vec4#E#(1, 4, 3, 2);
        TestUtili.assertEquals(Vec2.getMaxAxis(), 1);
        Vec4#E# Vec3 = new Vec4#E#(1, 2, 4, 3);
        TestUtili.assertEquals(Vec3.getMaxAxis(), 2);
        Vec4#E# Vec4 = new Vec4#E#(1, 2, 3, 4);
        TestUtili.assertEquals(Vec4.getMaxAxis(), 3);
    }

    @Test
    public void testConvertToVec2() {
        Vec2#E# vector = new Vec4#E#(1, 2, 3, 4).toVec2();
        TestUtil#E#.assertEquals(vector, 1, 2);
    }

    @Test
    public void testConvertToVec3() {
        Vec3#E# vector = new Vec4#E#(1, 2, 3, 4).toVec3();
        TestUtil#E#.assertEquals(vector, 1, 2, 3);
    }

    @Test
    public void testConvertToVecN() {
        VecN#E# vector = new Vec4#E#(1, 2, 3, 4).toVecN();
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4);
    }

    @Test
    public void testConvertToArray() {
        #e#[] array = new Vec4#E#(1, 2, 3, 4).toArray();
        TestUtil#E#.assertEquals(array, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4);
    }

    @Test
    public void testComparison() {
        int c1 = new Vec4#E#(10, 20, 30, 40).compareTo(new Vec4#E#(20, 20, 30, 40));
        Assert.assertTrue(c1 < 0);
        int c2 = new Vec4#E#(10, 20, 30, 40).compareTo(new Vec4#E#(10, 20, 30, 40));
        Assert.assertTrue(c2 == 0);
        int c3 = new Vec4#E#(10, 20, 30, 40).compareTo(new Vec4#E#(10, 10, 30, 40));
        Assert.assertTrue(c3 > 0);
    }

    @Test
    public void testEquals() {
        Assert.assertTrue(new Vec4#E#(122, 43, 96, 50).equals(new Vec4#E#(122, 43, 96, 50)));
        Assert.assertFalse(new Vec4#E#(122, 43, 96, 50).equals(new Vec4#E#(378, 95, 96, 0)));
    }

    @Test
    public void testCloning() {
        Vec4#E# vector = new Vec4#E#(3, 2, 5, 6);
        Assert.assertEquals(vector, vector.clone());
    }
}
