package com.flowpowered.math.vector;

import java.io.Serializable;
import java.util.Arrays;

import com.flowpowered.math.GenericMath;

public class VecN#E# implements Vector#E#, Comparable<VecN#E#>, Serializable, Cloneable {
    public static VecN#E# ZERO_2 = new ImmutableZeroVecN(0, 0);
    public static VecN#E# ZERO_3 = new ImmutableZeroVecN(0, 0, 0);
    public static VecN#E# ZERO_4 = new ImmutableZeroVecN(0, 0, 0, 0);
    private static final long serialVersionUID = 1;
    private final #e#[] vec;

    public VecN#E#(int size) {
        if (size < 2) {
            throw new IllegalArgumentException("Minimum vector size is 2");
        }
        vec = new #e#[size];
    }

    public VecN#E#(Vec2#E# v) {
        this(v.getX(), v.getY());
    }

    public VecN#E#(Vec3#E# v) {
        this(v.getX(), v.getY(), v.getZ());
    }

    public VecN#E#(Vec4#E# v) {
        this(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    public VecN#E#(VecN#E# v) {
        this(v.vec);
    }

    public VecN#E#(#e#... v) {
        vec = v.clone();
    }

    public int size() {
        return vec.length;
    }

    public #e# get(int comp) {
        return vec[comp];
    }

    public int getFloored(int comp) {
        return GenericMath.floor(get(comp));
    }

    public void set(int comp, #EOverload# val) {
        set(comp, (#e#) val);
    }

    public void set(int comp, #e# val) {
        vec[comp] = val;
    }

    public void setZero() {
        Arrays.fill(vec, 0);
    }

    public VecN#E# resize(int size) {
        final VecN#E# d = new VecN#E#(size);
        System.arraycopy(vec, 0, d.vec, 0, Math.min(size, size()));
        return d;
    }

    public VecN#E# add(VecN#E# v) {
        return add(v.vec);
    }

    public VecN#E# add(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] + v[comp];
        }
        return d;
    }

    public VecN#E# sub(VecN#E# v) {
        return sub(v.vec);
    }

    public VecN#E# sub(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] - v[comp];
        }
        return d;
    }

    public VecN#E# mul(#EOverload# a) {
        return mul((#e#) a);
    }

    @Override
    public VecN#E# mul(#e# a) {
        final int size = size();
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] * a;
        }
        return d;
    }

    public VecN#E# mul(VecN#E# v) {
        return mul(v.vec);
    }

    public VecN#E# mul(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] * v[comp];
        }
        return d;
    }

    public VecN#E# div(#EOverload# a) {
        return div((#e#) a);
    }

    @Override
    public VecN#E# div(#e# a) {
        final int size = size();
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] / a;
        }
        return d;
    }

    public VecN#E# div(VecN#E# v) {
        return div(v.vec);
    }

    public VecN#E# div(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] / v[comp];
        }
        return d;
    }

    public #e# dot(VecN#E# v) {
        return dot(v.vec);
    }

    public #e# dot(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        #e# d = 0;
        for (int comp = 0; comp < size; comp++) {
            d += vec[comp] * v[comp];
        }
        return d;
    }

    public VecN#E# project(VecN#E# v) {
        return project(v.vec);
    }

    public VecN#E# project(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        #e# lengthSquared = 0;
        for (int comp = 0; comp < size; comp++) {
            lengthSquared += v[comp] * v[comp];
        }
        if (Math.abs(lengthSquared) < #Eeps#) {
            throw new ArithmeticException("Cannot project onto the zero vector");
        }
        final #e# a = dot(v) / lengthSquared;
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = a * v[comp];
        }
        return d;
    }

    public VecN#E# pow(#EOverload# pow) {
        return pow((#e#) pow);
    }

    @Override
    public VecN#E# pow(#e# power) {
        final int size = size();
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = (#e#) Math.pow(vec[comp], power);
        }
        return d;
    }

    @Override
    public VecN#E# ceil() {
        final int size = size();
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = (#e#) Math.ceil(vec[comp]);
        }
        return d;
    }

    @Override
    public VecN#E# floor() {
        final int size = size();
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = GenericMath.floor(vec[comp]);
        }
        return d;
    }

    @Override
    public VecN#E# round() {
        final int size = size();
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.round(vec[comp]);
        }
        return d;
    }

    @Override
    public VecN#E# abs() {
        final int size = size();
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.abs(vec[comp]);
        }
        return d;
    }

    @Override
    public VecN#E# negate() {
        final int size = size();
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = -vec[comp];
        }
        return d;
    }

    public VecN#E# min(VecN#E# v) {
        return min(v.vec);
    }

    public VecN#E# min(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.min(vec[comp], v[comp]);
        }
        return d;
    }

    public VecN#E# max(VecN#E# v) {
        return max(v.vec);
    }

    public VecN#E# max(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.max(vec[comp], v[comp]);
        }
        return d;
    }

    public #e# distanceSquared(VecN#E# v) {
        return distanceSquared(v.vec);
    }

    public #e# distanceSquared(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        #e# d = 0;
        for (int comp = 0; comp < size; comp++) {
            final #e# delta = vec[comp] - v[comp];
            d += delta * delta;
        }
        return d;
    }

    public #e# distance(VecN#E# v) {
        return distance(v.vec);
    }

    public #e# distance(#e#... v) {
        return (#e#) Math.sqrt(distanceSquared(v));
    }

    @Override
    public #e# lengthSquared() {
        final int size = size();
        #e# l = 0;
        for (int comp = 0; comp < size; comp++) {
            l += vec[comp] * vec[comp];
        }
        return l;
    }

    @Override
    public #e# length() {
        return (#e#) Math.sqrt(lengthSquared());
    }

    @Override
    public VecN#E# normalize() {
        final #e# length = length();
        if (Math.abs(length) < #Eeps#) {
            throw new ArithmeticException("Cannot normalize the zero vector");
        }
        final int size = size();
        final VecN#E# d = new VecN#E#(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = (#e#) (vec[comp] / length);
        }
        return d;
    }

    @Override
    public int getMinAxis() {
        int axis = 0;
        #e# value = vec[axis];
        final int size = size();
        for (int comp = 1; comp < size; comp++) {
            if (vec[comp] < value) {
                value = vec[comp];
                axis = comp;
            }
        }
        return axis;
    }

    @Override
    public int getMaxAxis() {
        int axis = 0;
        #e# value = vec[axis];
        final int size = size();
        for (int comp = 1; comp < size; comp++) {
            if (vec[comp] > value) {
                value = vec[comp];
                axis = comp;
            }
        }
        return axis;
    }

    public Vec2#E# toVec2() {
        return new Vec2#E#(this);
    }

    public Vec3#E# toVec3() {
        return new Vec3#E#(this);
    }

    public Vec4#E# toVec4() {
        return new Vec4#E#(this);
    }

    @Override
    public #e#[] toArray() {
        return vec.clone();
    }

    @Override
    public VecNi toInt() {
        final int size = size();
        final int[] intVec = new int[size];
        for (int comp = 0; comp < size; comp++) {
            intVec[comp] = GenericMath.floor(vec[comp]);
        }
        return new VecNi(intVec);
    }

    @Override
    public VecNl toLong() {
        final int size = size();
        final long[] longVec = new long[size];
        for (int comp = 0; comp < size; comp++) {
            longVec[comp] = GenericMath.floorl(vec[comp]);
        }
        return new VecNl(longVec);
    }

    @Override
    public VecNf toFloat() {
        final int size = size();
        final float[] floatVec = new float[size];
        for (int comp = 0; comp < size; comp++) {
            floatVec[comp] = (float) vec[comp];
        }
        return new VecNf(floatVec);
    }

    @Override
    public VecNd toDouble() {
        final int size = size();
        final double[] doubleVec = new double[size];
        for (int comp = 0; comp < size; comp++) {
            doubleVec[comp] = (double) vec[comp];
        }
        return new VecNd(doubleVec);
    }

    @Override
    public int compareTo(VecN#E# v) {
        return (int) Math.signum(lengthSquared() - v.lengthSquared());
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof VecN#E#)) {
            return false;
        }
        return Arrays.equals(vec, ((VecN#E#) obj).vec);
    }

    @Override
    public int hashCode() {
        return 67 * 5 + Arrays.hashCode(vec);
    }

    @Override
    public VecN#E# clone() {
        return new VecN#E#(this);
    }

    @Override
    public String toString() {
        return Arrays.toString(vec).replace('[', '(').replace(']', ')');
    }

    private static class ImmutableZeroVecN extends VecN#E# {
        public ImmutableZeroVecN(#e#... v) {
            super(v);
        }

        @Override
        public void set(int comp, #e# val) {
            throw new UnsupportedOperationException("You may not alter this vector");
        }
    }
}
