package com.flowpowered.math.vector;

import java.io.Serializable;
import java.lang.Override;
import java.util.Random;

import com.flowpowered.math.GenericMath;
import com.flowpowered.math.HashFunctions;

public class Vec3#E# implements Vector#E#, Comparable<Vec3#E#>, Serializable, Cloneable {
    private static final long serialVersionUID = 1;
    public static final FlowPool<Vec3#E#> pool = new FlowPool(3, FlowPool.BITS_3D) {
        protected Vec3#E# create(#e# x, #e# y, #e# z, #e# w) {
            return new Vec3#E#(x, y, z);
        }
    };

    public static final Vec3#E# ZERO = new Vec3#E#(0, 0, 0);
    public static final Vec3#E# UNIT_X = new Vec3#E#(1, 0, 0);
    public static final Vec3#E# UNIT_Y = new Vec3#E#(0, 1, 0);
    public static final Vec3#E# UNIT_Z = new Vec3#E#(0, 0, 1);
    public static final Vec3#E# ONE = new Vec3#E#(1, 1, 1);
    public static final Vec3#E# RIGHT = UNIT_X;
    public static final Vec3#E# UP = UNIT_Y;
    public static final Vec3#E# FORWARD = UNIT_Z;
    private final #e# x;
    private final #e# y;
    private final #e# z;
    private transient volatile boolean hashed = false;
    private transient volatile int hashCode = 0;

    public Vec3#E#() {
        this(0, 0, 0);
    }

    public Vec3#E#(Vec2#E# v) {
        this(v, 0);
    }

    public Vec3#E#(Vec2#E# v, #EOverload# z) {
        this(v, #EFloorFunc#(z));
    }

    public Vec3#E#(Vec2#E# v, #e# z) {
        this(v.getX(), v.getY(), z);
    }

    public Vec3#E#(Vec3#E# v) {
        this(v.x, v.y, v.z);
    }

    public Vec3#E#(Vec4#E# v) {
        this(v.getX(), v.getY(), v.getZ());
    }

    public Vec3#E#(VecN#E# v) {
        this(v.get(0), v.get(1), v.size() > 2 ? v.get(2) : 0);
    }

    public Vec3#E#(#EOverload# x, #EOverload# y, #EOverload# z) {
        this(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public Vec3#E#(#e# x, #e# y, #e# z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public #e# getX() {
        return x;
    }

    public #e# getY() {
        return y;
    }

    public #e# getZ() {
        return z;
    }

    public Vec3#E# add(Vec3#E# v) {
        return add(v.x, v.y, v.z);
    }

    public Vec3#E# add(#EOverload# x, #EOverload# y, #EOverload# z) {
        return add(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public Vec3#E# add(#e# x, #e# y, #e# z) {
        return new Vec3#E#(this.x + x, this.y + y, this.z + z);
    }

    public Vec3#E# sub(Vec3#E# v) {
        return sub(v.x, v.y, v.z);
    }

    public Vec3#E# sub(#EOverload# x, #EOverload# y, #EOverload# z) {
        return sub(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public Vec3#E# sub(#e# x, #e# y, #e# z) {
        return new Vec3#E#(this.x - x, this.y - y, this.z - z);
    }

    public Vec3#E# mul(#EOverload# a) {
        return mul(#EFloorFunc#(a));
    }

    @Override
    public Vec3#E# mul(#e# a) {
        return mul(a, a, a);
    }

    public Vec3#E# mul(Vec3#E# v) {
        return mul(v.x, v.y, v.z);
    }

    public Vec3#E# mul(#EOverload# x, #EOverload# y, #EOverload# z) {
        return mul(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public Vec3#E# mul(#e# x, #e# y, #e# z) {
        return new Vec3#E#(this.x * x, this.y * y, this.z * z);
    }

    public Vec3#E# div(#EOverload# a) {
        return div(#EFloorFunc#(a));
    }

    @Override
    public Vec3#E# div(#e# a) {
        return div(a, a, a);
    }

    public Vec3#E# div(Vec3#E# v) {
        return div(v.x, v.y, v.z);
    }

    public Vec3#E# div(#EOverload# x, #EOverload# y, #EOverload# z) {
        return div(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public Vec3#E# div(#e# x, #e# y, #e# z) {
        return new Vec3#E#(this.x / x, this.y / y, this.z / z);
    }

    public #e# dot(Vec3#E# v) {
        return dot(v.x, v.y, v.z);
    }

    public #e# dot(#EOverload# x, #EOverload# y, #EOverload# z) {
        return dot(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public #e# dot(#e# x, #e# y, #e# z) {
        return this.x * x + this.y * y + this.z * z;
    }

    public Vec3#E# project(Vec3#E# v) {
        return project(v.x, v.y, v.z);
    }

    public Vec3#E# project(#EOverload# x, #EOverload# y, #EOverload# z) {
        return project(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public Vec3#E# project(#e# x, #e# y, #e# z) {
        final #e# lengthSquared = x * x + y * y + z * z;
        if (lengthSquared == 0) {
            throw new ArithmeticException("Cannot project onto the zero vector");
        }
        final #EDecEqui# a = (#EDecEqui#) dot(x, y, z) / lengthSquared;
        return new Vec3#E#(a * x, a * y, a * z);
    }

    public Vec3#E# cross(Vec3#E# v) {
        return cross(v.x, v.y, v.z);
    }

    public Vec3#E# cross(#EOverload# x, #EOverload# y, #EOverload# z) {
        return cross(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public Vec3#E# cross(#e# x, #e# y, #e# z) {
        return new Vec3#E#(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x);
    }

    public Vec3#E# pow(#EOverload# pow) {
        return pow(#EFloorFunc#(pow));
    }

    @Override
    public Vec3#E# pow(#e# power) {
        return new Vec3#E#(Math.pow(x, power), Math.pow(y, power), Math.pow(z, power));
    }

    @Override
    public Vec3#E# abs() {
        return new Vec3#E#(Math.abs(x), Math.abs(y), Math.abs(z));
    }

    @Override
    public Vec3#E# negate() {
        return new Vec3#E#(-x, -y, -z);
    }

    public Vec3#E# min(Vec3#E# v) {
        return min(v.x, v.y, v.z);
    }

    public Vec3#E# min(#EOverload# x, #EOverload# y, #EOverload# z) {
        return min(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public Vec3#E# min(#e# x, #e# y, #e# z) {
        return new Vec3#E#(Math.min(this.x, x), Math.min(this.y, y), Math.min(this.z, z));
    }

    public Vec3#E# max(Vec3#E# v) {
        return max(v.x, v.y, v.z);
    }

    public Vec3#E# max(#EOverload# x, #EOverload# y, #EOverload# z) {
        return max(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public Vec3#E# max(#e# x, #e# y, #e# z) {
        return new Vec3#E#(Math.max(this.x, x), Math.max(this.y, y), Math.max(this.z, z));
    }

    public #e# distanceSquared(Vec3#E# v) {
        return distanceSquared(v.x, v.y, v.z);
    }

    public #e# distanceSquared(#EOverload# x, #EOverload# y, #EOverload# z) {
        return distanceSquared(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public #e# distanceSquared(#e# x, #e# y, #e# z) {
        final #e# dx = this.x - x;
        final #e# dy = this.y - y;
        final #e# dz = this.z - z;
        return dx * dx + dy * dy + dz * dz;
    }

    public #EDecEqui# distance(Vec3#E# v) {
        return distance(v.x, v.y, v.z);
    }

    public #EDecEqui# distance(#EOverload# x, #EOverload# y, #EOverload# z) {
        return distance(#EFloorFunc#(x), #EFloorFunc#(y), #EFloorFunc#(z));
    }

    public #EDecEqui# distance(#e# x, #e# y, #e# z) {
        return (#EDecEqui#) Math.sqrt(distanceSquared(x, y, z));
    }

    @Override
    public #e# lengthSquared() {
        return x * x + y * y + z * z;
    }

    @Override
    public #EDecEqui# length() {
        return (#EDecEqui#) Math.sqrt(lengthSquared());
    }

    /**
     * Returns the axis with the minimal value.
     *
     * @return {@link int} axis with minimal value
     */
    @Override
    public int getMinAxis() {
        return x < y ? (x < z ? 0 : 2) : (y < z ? 1 : 2);
    }

    /**
     * Returns the axis with the maximum value.
     *
     * @return {@link int} axis with maximum value
     */
    @Override
    public int getMaxAxis() {
        return x < y ? (y < z ? 2 : 1) : (x < z ? 2 : 0);
    }

    public Vec2#E# toVec2() {
        return new Vec2#E#(this);
    }

    public Vec2#E# toVec2(boolean useZ) {
        return new Vec2#E#(x, useZ ? z : y);
    }

    public Vec4#E# toVec4() {
        return toVec4(0);
    }

    public Vec4#E# toVec4(#EOverload# w) {
        return toVec4(#EFloorFunc#(w));
    }

    public Vec4#E# toVec4(#e# w) {
        return new Vec4#E#(this, w);
    }

    public VecN#E# toVecN() {
        return new VecN#E#(this);
    }

    @Override
    public #e#[] toArray() {
        return new #e#[]{x, y, z};
    }

    @Override
    public Vec3i toInt() {
        return new Vec3i(x, y, z);
    }

    @Override
    public Vec3l toLong() {
        return new Vec3l(x, y, z);
    }

    @Override
    public Vec3f toFloat() {
        return new Vec3f(x, y, z);
    }

    @Override
    public Vec3d toDouble() {
        return new Vec3d(x, y, z);
    }

    @Override
    public int compareTo(Vec3#E# v) {
        return (int) (lengthSquared() - v.lengthSquared());
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Vec3#E#)) {
            return false;
        }
        final Vec3#E# Vec3 = (Vec3#E#) o;
        if (Vec3.x != x) {
            return false;
        }
        if (Vec3.y != y) {
            return false;
        }
        if (Vec3.z != z) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!hashed) {
            hashCode = ((HashFunctions.hash(x) * 211 + HashFunctions.hash(y)) * 97 + HashFunctions.hash(z));
            hashed = true;
        }
        return hashCode;
    }

    @Override
    public Vec3#E# clone() {
        return new Vec3#E#(this);
    }

    @Override
    public String toString() {
        return "(" + x + ", " + y + ", " + z + ")";
    }

    public static Vec3#E# from(#e# n) {
         return n == 0 ? ZERO : new Vec3#E#(n, n, n);
    }

    public static Vec3#E# from(#e# x, #e# y, #e# z) {
         return x == 0 && y == 0 && z == 0 ? ZERO : new Vec3#E#(x, y, z);
    }

    public static Vec3#E# createPooled(#e# x, #e# y, #e# z) {
        return pool.getPooled(x, y, z, 0);
    }
}
